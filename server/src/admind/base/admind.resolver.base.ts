/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAdmindArgs } from "./CreateAdmindArgs";
import { UpdateAdmindArgs } from "./UpdateAdmindArgs";
import { DeleteAdmindArgs } from "./DeleteAdmindArgs";
import { AdmindFindManyArgs } from "./AdmindFindManyArgs";
import { AdmindFindUniqueArgs } from "./AdmindFindUniqueArgs";
import { Admind } from "./Admind";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { AdmindService } from "../admind.service";

@graphql.Resolver(() => Admind)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class AdmindResolverBase {
  constructor(
    protected readonly service: AdmindService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Admind",
    action: "read",
    possession: "any",
  })
  async _admindsMeta(
    @graphql.Args() args: AdmindFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Admind])
  @nestAccessControl.UseRoles({
    resource: "Admind",
    action: "read",
    possession: "any",
  })
  async adminds(@graphql.Args() args: AdmindFindManyArgs): Promise<Admind[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Admind, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Admind",
    action: "read",
    possession: "own",
  })
  async admind(
    @graphql.Args() args: AdmindFindUniqueArgs
  ): Promise<Admind | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Admind)
  @nestAccessControl.UseRoles({
    resource: "Admind",
    action: "create",
    possession: "any",
  })
  async createAdmind(@graphql.Args() args: CreateAdmindArgs): Promise<Admind> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Admind)
  @nestAccessControl.UseRoles({
    resource: "Admind",
    action: "update",
    possession: "any",
  })
  async updateAdmind(
    @graphql.Args() args: UpdateAdmindArgs
  ): Promise<Admind | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Admind)
  @nestAccessControl.UseRoles({
    resource: "Admind",
    action: "delete",
    possession: "any",
  })
  async deleteAdmind(
    @graphql.Args() args: DeleteAdmindArgs
  ): Promise<Admind | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User])
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async users(
    @graphql.Parent() parent: Admind,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
